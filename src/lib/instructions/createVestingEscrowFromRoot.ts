/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CREATE_VESTING_ESCROW_FROM_ROOT_DISCRIMINATOR = new Uint8Array([
  6, 238, 161, 108, 252, 114, 246, 91,
]);

export function getCreateVestingEscrowFromRootDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VESTING_ESCROW_FROM_ROOT_DISCRIMINATOR
  );
}

export type CreateVestingEscrowFromRootInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountRootEscrow extends string | IAccountMeta<string> = string,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountRootEscrowToken extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRootEscrow extends string
        ? WritableAccount<TAccountRootEscrow>
        : TAccountRootEscrow,
      TAccountBase extends string
        ? ReadonlyAccount<TAccountBase>
        : TAccountBase,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountRootEscrowToken extends string
        ? WritableAccount<TAccountRootEscrowToken>
        : TAccountRootEscrowToken,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRecipient extends string
        ? ReadonlyAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVestingEscrowFromRootInstructionData = {
  discriminator: ReadonlyUint8Array;
  vestingStartTime: bigint;
  cliffTime: bigint;
  frequency: bigint;
  cliffUnlockAmount: bigint;
  amountPerPeriod: bigint;
  numberOfPeriod: bigint;
  updateRecipientMode: number;
  cancelMode: number;
  proof: Array<ReadonlyUint8Array>;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type CreateVestingEscrowFromRootInstructionDataArgs = {
  vestingStartTime: number | bigint;
  cliffTime: number | bigint;
  frequency: number | bigint;
  cliffUnlockAmount: number | bigint;
  amountPerPeriod: number | bigint;
  numberOfPeriod: number | bigint;
  updateRecipientMode: number;
  cancelMode: number;
  proof: Array<ReadonlyUint8Array>;
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getCreateVestingEscrowFromRootInstructionDataEncoder(): Encoder<CreateVestingEscrowFromRootInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['vestingStartTime', getU64Encoder()],
      ['cliffTime', getU64Encoder()],
      ['frequency', getU64Encoder()],
      ['cliffUnlockAmount', getU64Encoder()],
      ['amountPerPeriod', getU64Encoder()],
      ['numberOfPeriod', getU64Encoder()],
      ['updateRecipientMode', getU8Encoder()],
      ['cancelMode', getU8Encoder()],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      [
        'remainingAccountsInfo',
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_VESTING_ESCROW_FROM_ROOT_DISCRIMINATOR,
    })
  );
}

export function getCreateVestingEscrowFromRootInstructionDataDecoder(): Decoder<CreateVestingEscrowFromRootInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['vestingStartTime', getU64Decoder()],
    ['cliffTime', getU64Decoder()],
    ['frequency', getU64Decoder()],
    ['cliffUnlockAmount', getU64Decoder()],
    ['amountPerPeriod', getU64Decoder()],
    ['numberOfPeriod', getU64Decoder()],
    ['updateRecipientMode', getU8Decoder()],
    ['cancelMode', getU8Decoder()],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    [
      'remainingAccountsInfo',
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCreateVestingEscrowFromRootInstructionDataCodec(): Codec<
  CreateVestingEscrowFromRootInstructionDataArgs,
  CreateVestingEscrowFromRootInstructionData
> {
  return combineCodec(
    getCreateVestingEscrowFromRootInstructionDataEncoder(),
    getCreateVestingEscrowFromRootInstructionDataDecoder()
  );
}

export type CreateVestingEscrowFromRootAsyncInput<
  TAccountRootEscrow extends string = string,
  TAccountBase extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRootEscrowToken extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountRecipient extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Root Escrow. */
  rootEscrow: Address<TAccountRootEscrow>;
  base?: Address<TAccountBase>;
  /** Escrow. */
  escrow?: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken?: Address<TAccountEscrowToken>;
  rootEscrowToken?: Address<TAccountRootEscrowToken>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Rent Payer */
  payer: TransactionSigner<TAccountPayer>;
  recipient: Address<TAccountRecipient>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  vestingStartTime: CreateVestingEscrowFromRootInstructionDataArgs['vestingStartTime'];
  cliffTime: CreateVestingEscrowFromRootInstructionDataArgs['cliffTime'];
  frequency: CreateVestingEscrowFromRootInstructionDataArgs['frequency'];
  cliffUnlockAmount: CreateVestingEscrowFromRootInstructionDataArgs['cliffUnlockAmount'];
  amountPerPeriod: CreateVestingEscrowFromRootInstructionDataArgs['amountPerPeriod'];
  numberOfPeriod: CreateVestingEscrowFromRootInstructionDataArgs['numberOfPeriod'];
  updateRecipientMode: CreateVestingEscrowFromRootInstructionDataArgs['updateRecipientMode'];
  cancelMode: CreateVestingEscrowFromRootInstructionDataArgs['cancelMode'];
  proof: CreateVestingEscrowFromRootInstructionDataArgs['proof'];
  remainingAccountsInfo: CreateVestingEscrowFromRootInstructionDataArgs['remainingAccountsInfo'];
};

export async function getCreateVestingEscrowFromRootInstructionAsync<
  TAccountRootEscrow extends string,
  TAccountBase extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountRootEscrowToken extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountRecipient extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowFromRootAsyncInput<
    TAccountRootEscrow,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRootEscrowToken,
    TAccountTokenMint,
    TAccountPayer,
    TAccountRecipient,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateVestingEscrowFromRootInstruction<
    TProgramAddress,
    TAccountRootEscrow,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRootEscrowToken,
    TAccountTokenMint,
    TAccountPayer,
    TAccountRecipient,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rootEscrow: { value: input.rootEscrow ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    rootEscrowToken: { value: input.rootEscrowToken ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.base.value) {
    accounts.base.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([98, 97, 115, 101])),
        getAddressEncoder().encode(expectAddress(accounts.rootEscrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.recipient.value)),
      ],
    });
  }
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(expectAddress(accounts.base.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.escrowToken.value) {
    accounts.escrowToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.rootEscrowToken.value) {
    accounts.rootEscrowToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.rootEscrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rootEscrow),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.rootEscrowToken),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateVestingEscrowFromRootInstructionDataEncoder().encode(
      args as CreateVestingEscrowFromRootInstructionDataArgs
    ),
  } as CreateVestingEscrowFromRootInstruction<
    TProgramAddress,
    TAccountRootEscrow,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRootEscrowToken,
    TAccountTokenMint,
    TAccountPayer,
    TAccountRecipient,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateVestingEscrowFromRootInput<
  TAccountRootEscrow extends string = string,
  TAccountBase extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRootEscrowToken extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountRecipient extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Root Escrow. */
  rootEscrow: Address<TAccountRootEscrow>;
  base: Address<TAccountBase>;
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  rootEscrowToken: Address<TAccountRootEscrowToken>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Rent Payer */
  payer: TransactionSigner<TAccountPayer>;
  recipient: Address<TAccountRecipient>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  vestingStartTime: CreateVestingEscrowFromRootInstructionDataArgs['vestingStartTime'];
  cliffTime: CreateVestingEscrowFromRootInstructionDataArgs['cliffTime'];
  frequency: CreateVestingEscrowFromRootInstructionDataArgs['frequency'];
  cliffUnlockAmount: CreateVestingEscrowFromRootInstructionDataArgs['cliffUnlockAmount'];
  amountPerPeriod: CreateVestingEscrowFromRootInstructionDataArgs['amountPerPeriod'];
  numberOfPeriod: CreateVestingEscrowFromRootInstructionDataArgs['numberOfPeriod'];
  updateRecipientMode: CreateVestingEscrowFromRootInstructionDataArgs['updateRecipientMode'];
  cancelMode: CreateVestingEscrowFromRootInstructionDataArgs['cancelMode'];
  proof: CreateVestingEscrowFromRootInstructionDataArgs['proof'];
  remainingAccountsInfo: CreateVestingEscrowFromRootInstructionDataArgs['remainingAccountsInfo'];
};

export function getCreateVestingEscrowFromRootInstruction<
  TAccountRootEscrow extends string,
  TAccountBase extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountRootEscrowToken extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountRecipient extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowFromRootInput<
    TAccountRootEscrow,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRootEscrowToken,
    TAccountTokenMint,
    TAccountPayer,
    TAccountRecipient,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVestingEscrowFromRootInstruction<
  TProgramAddress,
  TAccountRootEscrow,
  TAccountBase,
  TAccountEscrow,
  TAccountEscrowToken,
  TAccountRootEscrowToken,
  TAccountTokenMint,
  TAccountPayer,
  TAccountRecipient,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rootEscrow: { value: input.rootEscrow ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    rootEscrowToken: { value: input.rootEscrowToken ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rootEscrow),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.rootEscrowToken),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateVestingEscrowFromRootInstructionDataEncoder().encode(
      args as CreateVestingEscrowFromRootInstructionDataArgs
    ),
  } as CreateVestingEscrowFromRootInstruction<
    TProgramAddress,
    TAccountRootEscrow,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRootEscrowToken,
    TAccountTokenMint,
    TAccountPayer,
    TAccountRecipient,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateVestingEscrowFromRootInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Root Escrow. */
    rootEscrow: TAccountMetas[0];
    base: TAccountMetas[1];
    /** Escrow. */
    escrow: TAccountMetas[2];
    /** Escrow Token Account. */
    escrowToken: TAccountMetas[3];
    rootEscrowToken: TAccountMetas[4];
    /** Mint. */
    tokenMint: TAccountMetas[5];
    /** Rent Payer */
    payer: TAccountMetas[6];
    recipient: TAccountMetas[7];
    /** system program. */
    systemProgram: TAccountMetas[8];
    /** Token program. */
    tokenProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    eventAuthority: TAccountMetas[11];
    program: TAccountMetas[12];
  };
  data: CreateVestingEscrowFromRootInstructionData;
};

export function parseCreateVestingEscrowFromRootInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateVestingEscrowFromRootInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rootEscrow: getNextAccount(),
      base: getNextAccount(),
      escrow: getNextAccount(),
      escrowToken: getNextAccount(),
      rootEscrowToken: getNextAccount(),
      tokenMint: getNextAccount(),
      payer: getNextAccount(),
      recipient: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateVestingEscrowFromRootInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
