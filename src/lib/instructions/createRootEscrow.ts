/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_ROOT_ESCROW_DISCRIMINATOR = new Uint8Array([
  116, 212, 12, 188, 77, 226, 32, 201,
]);

export function getCreateRootEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_ROOT_ESCROW_DISCRIMINATOR
  );
}

export type CreateRootEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountRootEscrow extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountRootEscrow extends string
        ? WritableAccount<TAccountRootEscrow>
        : TAccountRootEscrow,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateRootEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxClaimAmount: bigint;
  maxEscrow: bigint;
  version: bigint;
  root: ReadonlyUint8Array;
};

export type CreateRootEscrowInstructionDataArgs = {
  maxClaimAmount: number | bigint;
  maxEscrow: number | bigint;
  version: number | bigint;
  root: ReadonlyUint8Array;
};

export function getCreateRootEscrowInstructionDataEncoder(): Encoder<CreateRootEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxClaimAmount', getU64Encoder()],
      ['maxEscrow', getU64Encoder()],
      ['version', getU64Encoder()],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: CREATE_ROOT_ESCROW_DISCRIMINATOR })
  );
}

export function getCreateRootEscrowInstructionDataDecoder(): Decoder<CreateRootEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxClaimAmount', getU64Decoder()],
    ['maxEscrow', getU64Decoder()],
    ['version', getU64Decoder()],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getCreateRootEscrowInstructionDataCodec(): Codec<
  CreateRootEscrowInstructionDataArgs,
  CreateRootEscrowInstructionData
> {
  return combineCodec(
    getCreateRootEscrowInstructionDataEncoder(),
    getCreateRootEscrowInstructionDataDecoder()
  );
}

export type CreateRootEscrowAsyncInput<
  TAccountBase extends string = string,
  TAccountRootEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  base: TransactionSigner<TAccountBase>;
  /** Root Escrow. */
  rootEscrow: Address<TAccountRootEscrow>;
  tokenMint: Address<TAccountTokenMint>;
  /** payer. */
  payer: TransactionSigner<TAccountPayer>;
  creator: Address<TAccountCreator>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxClaimAmount: CreateRootEscrowInstructionDataArgs['maxClaimAmount'];
  maxEscrow: CreateRootEscrowInstructionDataArgs['maxEscrow'];
  version: CreateRootEscrowInstructionDataArgs['version'];
  root: CreateRootEscrowInstructionDataArgs['root'];
};

export async function getCreateRootEscrowInstructionAsync<
  TAccountBase extends string,
  TAccountRootEscrow extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateRootEscrowAsyncInput<
    TAccountBase,
    TAccountRootEscrow,
    TAccountTokenMint,
    TAccountPayer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateRootEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRootEscrow,
    TAccountTokenMint,
    TAccountPayer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    rootEscrow: { value: input.rootEscrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.rootEscrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateRootEscrowInstructionDataEncoder().encode(
      args as CreateRootEscrowInstructionDataArgs
    ),
  } as CreateRootEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRootEscrow,
    TAccountTokenMint,
    TAccountPayer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateRootEscrowInput<
  TAccountBase extends string = string,
  TAccountRootEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  base: TransactionSigner<TAccountBase>;
  /** Root Escrow. */
  rootEscrow: Address<TAccountRootEscrow>;
  tokenMint: Address<TAccountTokenMint>;
  /** payer. */
  payer: TransactionSigner<TAccountPayer>;
  creator: Address<TAccountCreator>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxClaimAmount: CreateRootEscrowInstructionDataArgs['maxClaimAmount'];
  maxEscrow: CreateRootEscrowInstructionDataArgs['maxEscrow'];
  version: CreateRootEscrowInstructionDataArgs['version'];
  root: CreateRootEscrowInstructionDataArgs['root'];
};

export function getCreateRootEscrowInstruction<
  TAccountBase extends string,
  TAccountRootEscrow extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateRootEscrowInput<
    TAccountBase,
    TAccountRootEscrow,
    TAccountTokenMint,
    TAccountPayer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateRootEscrowInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountRootEscrow,
  TAccountTokenMint,
  TAccountPayer,
  TAccountCreator,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    rootEscrow: { value: input.rootEscrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.rootEscrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateRootEscrowInstructionDataEncoder().encode(
      args as CreateRootEscrowInstructionDataArgs
    ),
  } as CreateRootEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRootEscrow,
    TAccountTokenMint,
    TAccountPayer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateRootEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    /** Root Escrow. */
    rootEscrow: TAccountMetas[1];
    tokenMint: TAccountMetas[2];
    /** payer. */
    payer: TAccountMetas[3];
    creator: TAccountMetas[4];
    /** system program. */
    systemProgram: TAccountMetas[5];
    eventAuthority: TAccountMetas[6];
    program: TAccountMetas[7];
  };
  data: CreateRootEscrowInstructionData;
};

export function parseCreateRootEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateRootEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      rootEscrow: getNextAccount(),
      tokenMint: getNextAccount(),
      payer: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateRootEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
