/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_DISCRIMINATOR = new Uint8Array([
  62, 198, 214, 193, 213, 159, 108, 210,
]);

export function getClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_DISCRIMINATOR);
}

export type ClaimInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TAccountRecipientToken extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountRecipient extends string
        ? WritableSignerAccount<TAccountRecipient> &
            IAccountSignerMeta<TAccountRecipient>
        : TAccountRecipient,
      TAccountRecipientToken extends string
        ? WritableAccount<TAccountRecipientToken>
        : TAccountRecipientToken,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmount: bigint;
};

export type ClaimInstructionDataArgs = { maxAmount: number | bigint };

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR })
  );
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmount', getU64Decoder()],
  ]);
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder()
  );
}

export type ClaimAsyncInput<
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken?: Address<TAccountEscrowToken>;
  /** Recipient. */
  recipient: TransactionSigner<TAccountRecipient>;
  /** Recipient Token Account. */
  recipientToken: Address<TAccountRecipientToken>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmount: ClaimInstructionDataArgs['maxAmount'];
};

export async function getClaimInstructionAsync<
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountRecipient extends string,
  TAccountRecipientToken extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: ClaimAsyncInput<
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrowToken.value) {
    accounts.escrowToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimInput<
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  /** Recipient. */
  recipient: TransactionSigner<TAccountRecipient>;
  /** Recipient Token Account. */
  recipientToken: Address<TAccountRecipientToken>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmount: ClaimInstructionDataArgs['maxAmount'];
};

export function getClaimInstruction<
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountRecipient extends string,
  TAccountRecipientToken extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountEscrowToken,
  TAccountRecipient,
  TAccountRecipientToken,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Escrow. */
    escrow: TAccountMetas[0];
    /** Escrow Token Account. */
    escrowToken: TAccountMetas[1];
    /** Recipient. */
    recipient: TAccountMetas[2];
    /** Recipient Token Account. */
    recipientToken: TAccountMetas[3];
    /** Token program. */
    tokenProgram: TAccountMetas[4];
    eventAuthority: TAccountMetas[5];
    program: TAccountMetas[6];
  };
  data: ClaimInstructionData;
};

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      escrowToken: getNextAccount(),
      recipient: getNextAccount(),
      recipientToken: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  };
}
