/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getCreateVestingEscrowParametersDecoder,
  getCreateVestingEscrowParametersEncoder,
  type CreateVestingEscrowParameters,
  type CreateVestingEscrowParametersArgs,
} from '../types';

export const CREATE_VESTING_ESCROW_DISCRIMINATOR = new Uint8Array([
  23, 100, 197, 94, 222, 153, 38, 90,
]);

export function getCreateVestingEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VESTING_ESCROW_DISCRIMINATOR
  );
}

export type CreateVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountSender extends string | IAccountMeta<string> = string,
  TAccountSenderToken extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBase extends string
        ? WritableSignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountSender extends string
        ? WritableSignerAccount<TAccountSender> &
            IAccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountSenderToken extends string
        ? WritableAccount<TAccountSenderToken>
        : TAccountSenderToken,
      TAccountRecipient extends string
        ? ReadonlyAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVestingEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: CreateVestingEscrowParameters;
};

export type CreateVestingEscrowInstructionDataArgs = {
  params: CreateVestingEscrowParametersArgs;
};

export function getCreateVestingEscrowInstructionDataEncoder(): Encoder<CreateVestingEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getCreateVestingEscrowParametersEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_VESTING_ESCROW_DISCRIMINATOR,
    })
  );
}

export function getCreateVestingEscrowInstructionDataDecoder(): Decoder<CreateVestingEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getCreateVestingEscrowParametersDecoder()],
  ]);
}

export function getCreateVestingEscrowInstructionDataCodec(): Codec<
  CreateVestingEscrowInstructionDataArgs,
  CreateVestingEscrowInstructionData
> {
  return combineCodec(
    getCreateVestingEscrowInstructionDataEncoder(),
    getCreateVestingEscrowInstructionDataDecoder()
  );
}

export type CreateVestingEscrowAsyncInput<
  TAccountBase extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountSender extends string = string,
  TAccountSenderToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Base. */
  base: TransactionSigner<TAccountBase>;
  /** Escrow. */
  escrow?: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  /** Sender. */
  sender: TransactionSigner<TAccountSender>;
  /** Sender Token Account. */
  senderToken: Address<TAccountSenderToken>;
  recipient: Address<TAccountRecipient>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: CreateVestingEscrowInstructionDataArgs['params'];
};

export async function getCreateVestingEscrowInstructionAsync<
  TAccountBase extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountSender extends string,
  TAccountSenderToken extends string,
  TAccountRecipient extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowAsyncInput<
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountSender,
    TAccountSenderToken,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateVestingEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountSender,
    TAccountSenderToken,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    senderToken: { value: input.senderToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(expectAddress(accounts.base.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.senderToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateVestingEscrowInstructionDataEncoder().encode(
      args as CreateVestingEscrowInstructionDataArgs
    ),
  } as CreateVestingEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountSender,
    TAccountSenderToken,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateVestingEscrowInput<
  TAccountBase extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountSender extends string = string,
  TAccountSenderToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Base. */
  base: TransactionSigner<TAccountBase>;
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  /** Sender. */
  sender: TransactionSigner<TAccountSender>;
  /** Sender Token Account. */
  senderToken: Address<TAccountSenderToken>;
  recipient: Address<TAccountRecipient>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: CreateVestingEscrowInstructionDataArgs['params'];
};

export function getCreateVestingEscrowInstruction<
  TAccountBase extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountSender extends string,
  TAccountSenderToken extends string,
  TAccountRecipient extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowInput<
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountSender,
    TAccountSenderToken,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVestingEscrowInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountEscrow,
  TAccountEscrowToken,
  TAccountSender,
  TAccountSenderToken,
  TAccountRecipient,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    senderToken: { value: input.senderToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.senderToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateVestingEscrowInstructionDataEncoder().encode(
      args as CreateVestingEscrowInstructionDataArgs
    ),
  } as CreateVestingEscrowInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountSender,
    TAccountSenderToken,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Base. */
    base: TAccountMetas[0];
    /** Escrow. */
    escrow: TAccountMetas[1];
    /** Escrow Token Account. */
    escrowToken: TAccountMetas[2];
    /** Sender. */
    sender: TAccountMetas[3];
    /** Sender Token Account. */
    senderToken: TAccountMetas[4];
    recipient: TAccountMetas[5];
    /** Token program. */
    tokenProgram: TAccountMetas[6];
    /** system program. */
    systemProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: CreateVestingEscrowInstructionData;
};

export function parseCreateVestingEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateVestingEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      escrow: getNextAccount(),
      escrowToken: getNextAccount(),
      sender: getNextAccount(),
      senderToken: getNextAccount(),
      recipient: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateVestingEscrowInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
