/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CANCEL_VESTING_ESCROW_DISCRIMINATOR = new Uint8Array([
  217, 233, 13, 3, 143, 101, 53, 201,
]);

export function getCancelVestingEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_VESTING_ESCROW_DISCRIMINATOR
  );
}

export type CancelVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountCreatorToken extends string | IAccountMeta<string> = string,
  TAccountRecipientToken extends string | IAccountMeta<string> = string,
  TAccountRentReceiver extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends
    | string
    | IAccountMeta<string> = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountTokenMint extends string
        ? WritableAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountCreatorToken extends string
        ? WritableAccount<TAccountCreatorToken>
        : TAccountCreatorToken,
      TAccountRecipientToken extends string
        ? WritableAccount<TAccountRecipientToken>
        : TAccountRecipientToken,
      TAccountRentReceiver extends string
        ? WritableAccount<TAccountRentReceiver>
        : TAccountRentReceiver,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CancelVestingEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type CancelVestingEscrowInstructionDataArgs = {
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getCancelVestingEscrowInstructionDataEncoder(): Encoder<CancelVestingEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'remainingAccountsInfo',
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CANCEL_VESTING_ESCROW_DISCRIMINATOR,
    })
  );
}

export function getCancelVestingEscrowInstructionDataDecoder(): Decoder<CancelVestingEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'remainingAccountsInfo',
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCancelVestingEscrowInstructionDataCodec(): Codec<
  CancelVestingEscrowInstructionDataArgs,
  CancelVestingEscrowInstructionData
> {
  return combineCodec(
    getCancelVestingEscrowInstructionDataEncoder(),
    getCancelVestingEscrowInstructionDataDecoder()
  );
}

export type CancelVestingEscrowAsyncInput<
  TAccountEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountCreatorToken extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountSigner extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Escrow Token Account. */
  escrowToken?: Address<TAccountEscrowToken>;
  /** Creator Token Account. */
  creatorToken?: Address<TAccountCreatorToken>;
  /** Receipient Token Account. */
  recipientToken?: Address<TAccountRecipientToken>;
  /** CHECKED: The Token Account will receive the rent */
  rentReceiver: Address<TAccountRentReceiver>;
  /** Signer. */
  signer: TransactionSigner<TAccountSigner>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  remainingAccountsInfo: CancelVestingEscrowInstructionDataArgs['remainingAccountsInfo'];
};

export async function getCancelVestingEscrowInstructionAsync<
  TAccountEscrow extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountCreatorToken extends string,
  TAccountRecipientToken extends string,
  TAccountRentReceiver extends string,
  TAccountSigner extends string,
  TAccountMemoProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CancelVestingEscrowAsyncInput<
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountRecipientToken,
    TAccountRentReceiver,
    TAccountSigner,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CancelVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountRecipientToken,
    TAccountRentReceiver,
    TAccountSigner,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    creatorToken: { value: input.creatorToken ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.escrowToken.value) {
    accounts.escrowToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.creatorToken.value) {
    accounts.creatorToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.recipientToken.value) {
    accounts.recipientToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.creatorToken),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.rentReceiver),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCancelVestingEscrowInstructionDataEncoder().encode(
      args as CancelVestingEscrowInstructionDataArgs
    ),
  } as CancelVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountRecipientToken,
    TAccountRentReceiver,
    TAccountSigner,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CancelVestingEscrowInput<
  TAccountEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountCreatorToken extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountSigner extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  /** Creator Token Account. */
  creatorToken: Address<TAccountCreatorToken>;
  /** Receipient Token Account. */
  recipientToken: Address<TAccountRecipientToken>;
  /** CHECKED: The Token Account will receive the rent */
  rentReceiver: Address<TAccountRentReceiver>;
  /** Signer. */
  signer: TransactionSigner<TAccountSigner>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  remainingAccountsInfo: CancelVestingEscrowInstructionDataArgs['remainingAccountsInfo'];
};

export function getCancelVestingEscrowInstruction<
  TAccountEscrow extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountCreatorToken extends string,
  TAccountRecipientToken extends string,
  TAccountRentReceiver extends string,
  TAccountSigner extends string,
  TAccountMemoProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CancelVestingEscrowInput<
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountRecipientToken,
    TAccountRentReceiver,
    TAccountSigner,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CancelVestingEscrowInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountTokenMint,
  TAccountEscrowToken,
  TAccountCreatorToken,
  TAccountRecipientToken,
  TAccountRentReceiver,
  TAccountSigner,
  TAccountMemoProgram,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    creatorToken: { value: input.creatorToken ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.creatorToken),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.rentReceiver),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCancelVestingEscrowInstructionDataEncoder().encode(
      args as CancelVestingEscrowInstructionDataArgs
    ),
  } as CancelVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountRecipientToken,
    TAccountRentReceiver,
    TAccountSigner,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCancelVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Escrow. */
    escrow: TAccountMetas[0];
    /** Mint. */
    tokenMint: TAccountMetas[1];
    /** Escrow Token Account. */
    escrowToken: TAccountMetas[2];
    /** Creator Token Account. */
    creatorToken: TAccountMetas[3];
    /** Receipient Token Account. */
    recipientToken: TAccountMetas[4];
    /** CHECKED: The Token Account will receive the rent */
    rentReceiver: TAccountMetas[5];
    /** Signer. */
    signer: TAccountMetas[6];
    /** Memo program. */
    memoProgram: TAccountMetas[7];
    /** Token program. */
    tokenProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
  };
  data: CancelVestingEscrowInstructionData;
};

export function parseCancelVestingEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelVestingEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      tokenMint: getNextAccount(),
      escrowToken: getNextAccount(),
      creatorToken: getNextAccount(),
      recipientToken: getNextAccount(),
      rentReceiver: getNextAccount(),
      signer: getNextAccount(),
      memoProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCancelVestingEscrowInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
