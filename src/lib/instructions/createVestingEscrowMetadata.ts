/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_VESTING_ESCROW_METADATA_DISCRIMINATOR = new Uint8Array([
  93, 78, 33, 103, 173, 125, 70, 0,
]);

export function getCreateVestingEscrowMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VESTING_ESCROW_METADATA_DISCRIMINATOR
  );
}

export type CreateVestingEscrowMetadataInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountEscrowMetadata extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountEscrowMetadata extends string
        ? WritableAccount<TAccountEscrowMetadata>
        : TAccountEscrowMetadata,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVestingEscrowMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  description: string;
  creatorEmail: string;
  recipientEmail: string;
};

export type CreateVestingEscrowMetadataInstructionDataArgs = {
  name: string;
  description: string;
  creatorEmail: string;
  recipientEmail: string;
};

export function getCreateVestingEscrowMetadataInstructionDataEncoder(): Encoder<CreateVestingEscrowMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['creatorEmail', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'recipientEmail',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_VESTING_ESCROW_METADATA_DISCRIMINATOR,
    })
  );
}

export function getCreateVestingEscrowMetadataInstructionDataDecoder(): Decoder<CreateVestingEscrowMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['creatorEmail', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['recipientEmail', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateVestingEscrowMetadataInstructionDataCodec(): Codec<
  CreateVestingEscrowMetadataInstructionDataArgs,
  CreateVestingEscrowMetadataInstructionData
> {
  return combineCodec(
    getCreateVestingEscrowMetadataInstructionDataEncoder(),
    getCreateVestingEscrowMetadataInstructionDataDecoder()
  );
}

export type CreateVestingEscrowMetadataAsyncInput<
  TAccountEscrow extends string = string,
  TAccountCreator extends string = string,
  TAccountEscrowMetadata extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The [Escrow]. */
  escrow: Address<TAccountEscrow>;
  /** Creator of the escrow. */
  creator: TransactionSigner<TAccountCreator>;
  /** The [ProposalMeta]. */
  escrowMetadata?: Address<TAccountEscrowMetadata>;
  /** Payer of the [ProposalMeta]. */
  payer: TransactionSigner<TAccountPayer>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateVestingEscrowMetadataInstructionDataArgs['name'];
  description: CreateVestingEscrowMetadataInstructionDataArgs['description'];
  creatorEmail: CreateVestingEscrowMetadataInstructionDataArgs['creatorEmail'];
  recipientEmail: CreateVestingEscrowMetadataInstructionDataArgs['recipientEmail'];
};

export async function getCreateVestingEscrowMetadataInstructionAsync<
  TAccountEscrow extends string,
  TAccountCreator extends string,
  TAccountEscrowMetadata extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowMetadataAsyncInput<
    TAccountEscrow,
    TAccountCreator,
    TAccountEscrowMetadata,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateVestingEscrowMetadataInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountCreator,
    TAccountEscrowMetadata,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    escrowMetadata: { value: input.escrowMetadata ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrowMetadata.value) {
    accounts.escrowMetadata.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 115, 99, 114, 111, 119, 95, 109, 101, 116, 97, 100, 97, 116,
            97,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.escrowMetadata),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateVestingEscrowMetadataInstructionDataEncoder().encode(
      args as CreateVestingEscrowMetadataInstructionDataArgs
    ),
  } as CreateVestingEscrowMetadataInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountCreator,
    TAccountEscrowMetadata,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateVestingEscrowMetadataInput<
  TAccountEscrow extends string = string,
  TAccountCreator extends string = string,
  TAccountEscrowMetadata extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The [Escrow]. */
  escrow: Address<TAccountEscrow>;
  /** Creator of the escrow. */
  creator: TransactionSigner<TAccountCreator>;
  /** The [ProposalMeta]. */
  escrowMetadata: Address<TAccountEscrowMetadata>;
  /** Payer of the [ProposalMeta]. */
  payer: TransactionSigner<TAccountPayer>;
  /** system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateVestingEscrowMetadataInstructionDataArgs['name'];
  description: CreateVestingEscrowMetadataInstructionDataArgs['description'];
  creatorEmail: CreateVestingEscrowMetadataInstructionDataArgs['creatorEmail'];
  recipientEmail: CreateVestingEscrowMetadataInstructionDataArgs['recipientEmail'];
};

export function getCreateVestingEscrowMetadataInstruction<
  TAccountEscrow extends string,
  TAccountCreator extends string,
  TAccountEscrowMetadata extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CreateVestingEscrowMetadataInput<
    TAccountEscrow,
    TAccountCreator,
    TAccountEscrowMetadata,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVestingEscrowMetadataInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountCreator,
  TAccountEscrowMetadata,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    escrowMetadata: { value: input.escrowMetadata ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.escrowMetadata),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateVestingEscrowMetadataInstructionDataEncoder().encode(
      args as CreateVestingEscrowMetadataInstructionDataArgs
    ),
  } as CreateVestingEscrowMetadataInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountCreator,
    TAccountEscrowMetadata,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateVestingEscrowMetadataInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The [Escrow]. */
    escrow: TAccountMetas[0];
    /** Creator of the escrow. */
    creator: TAccountMetas[1];
    /** The [ProposalMeta]. */
    escrowMetadata: TAccountMetas[2];
    /** Payer of the [ProposalMeta]. */
    payer: TAccountMetas[3];
    /** system program. */
    systemProgram: TAccountMetas[4];
  };
  data: CreateVestingEscrowMetadataInstructionData;
};

export function parseCreateVestingEscrowMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateVestingEscrowMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      creator: getNextAccount(),
      escrowMetadata: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateVestingEscrowMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
