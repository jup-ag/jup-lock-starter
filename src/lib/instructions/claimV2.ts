/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CLAIM_V2_DISCRIMINATOR = new Uint8Array([
  229, 87, 46, 162, 21, 157, 231, 114,
]);

export function getClaimV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_V2_DISCRIMINATOR);
}

export type ClaimV2Instruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TAccountRecipientToken extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends
    | string
    | IAccountMeta<string> = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountRecipient extends string
        ? WritableSignerAccount<TAccountRecipient> &
            IAccountSignerMeta<TAccountRecipient>
        : TAccountRecipient,
      TAccountRecipientToken extends string
        ? WritableAccount<TAccountRecipientToken>
        : TAccountRecipientToken,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmount: bigint;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type ClaimV2InstructionDataArgs = {
  maxAmount: number | bigint;
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getClaimV2InstructionDataEncoder(): Encoder<ClaimV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmount', getU64Encoder()],
      [
        'remainingAccountsInfo',
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_V2_DISCRIMINATOR })
  );
}

export function getClaimV2InstructionDataDecoder(): Decoder<ClaimV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmount', getU64Decoder()],
    [
      'remainingAccountsInfo',
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getClaimV2InstructionDataCodec(): Codec<
  ClaimV2InstructionDataArgs,
  ClaimV2InstructionData
> {
  return combineCodec(
    getClaimV2InstructionDataEncoder(),
    getClaimV2InstructionDataDecoder()
  );
}

export type ClaimV2AsyncInput<
  TAccountEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Escrow Token Account. */
  escrowToken?: Address<TAccountEscrowToken>;
  /** Recipient. */
  recipient: TransactionSigner<TAccountRecipient>;
  /** Recipient Token Account. */
  recipientToken: Address<TAccountRecipientToken>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmount: ClaimV2InstructionDataArgs['maxAmount'];
  remainingAccountsInfo: ClaimV2InstructionDataArgs['remainingAccountsInfo'];
};

export async function getClaimV2InstructionAsync<
  TAccountEscrow extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountRecipient extends string,
  TAccountRecipientToken extends string,
  TAccountMemoProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: ClaimV2AsyncInput<
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimV2Instruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.escrowToken.value) {
    accounts.escrowToken.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimV2InstructionDataEncoder().encode(
      args as ClaimV2InstructionDataArgs
    ),
  } as ClaimV2Instruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimV2Input<
  TAccountEscrow extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountRecipient extends string = string,
  TAccountRecipientToken extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  /** Escrow Token Account. */
  escrowToken: Address<TAccountEscrowToken>;
  /** Recipient. */
  recipient: TransactionSigner<TAccountRecipient>;
  /** Recipient Token Account. */
  recipientToken: Address<TAccountRecipientToken>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmount: ClaimV2InstructionDataArgs['maxAmount'];
  remainingAccountsInfo: ClaimV2InstructionDataArgs['remainingAccountsInfo'];
};

export function getClaimV2Instruction<
  TAccountEscrow extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountRecipient extends string,
  TAccountRecipientToken extends string,
  TAccountMemoProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: ClaimV2Input<
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimV2Instruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountTokenMint,
  TAccountEscrowToken,
  TAccountRecipient,
  TAccountRecipientToken,
  TAccountMemoProgram,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    recipientToken: { value: input.recipientToken ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.recipientToken),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimV2InstructionDataEncoder().encode(
      args as ClaimV2InstructionDataArgs
    ),
  } as ClaimV2Instruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountRecipient,
    TAccountRecipientToken,
    TAccountMemoProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimV2Instruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Escrow. */
    escrow: TAccountMetas[0];
    /** Mint. */
    tokenMint: TAccountMetas[1];
    /** Escrow Token Account. */
    escrowToken: TAccountMetas[2];
    /** Recipient. */
    recipient: TAccountMetas[3];
    /** Recipient Token Account. */
    recipientToken: TAccountMetas[4];
    /** Memo program. */
    memoProgram: TAccountMetas[5];
    /** Token program. */
    tokenProgram: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: ClaimV2InstructionData;
};

export function parseClaimV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      tokenMint: getNextAccount(),
      escrowToken: getNextAccount(),
      recipient: getNextAccount(),
      recipientToken: getNextAccount(),
      memoProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimV2InstructionDataDecoder().decode(instruction.data),
  };
}
