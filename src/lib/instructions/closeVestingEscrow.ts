/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CLOSE_VESTING_ESCROW_DISCRIMINATOR = new Uint8Array([
  221, 185, 95, 135, 136, 67, 252, 87,
]);

export function getCloseVestingEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_VESTING_ESCROW_DISCRIMINATOR
  );
}

export type CloseVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountEscrowMetadata extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountEscrowToken extends string | IAccountMeta<string> = string,
  TAccountCreatorToken extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMemoProgram extends
    | string
    | IAccountMeta<string> = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowMetadata extends string
        ? WritableAccount<TAccountEscrowMetadata>
        : TAccountEscrowMetadata,
      TAccountTokenMint extends string
        ? WritableAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountCreatorToken extends string
        ? WritableAccount<TAccountCreatorToken>
        : TAccountCreatorToken,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseVestingEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type CloseVestingEscrowInstructionDataArgs = {
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getCloseVestingEscrowInstructionDataEncoder(): Encoder<CloseVestingEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'remainingAccountsInfo',
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: CLOSE_VESTING_ESCROW_DISCRIMINATOR })
  );
}

export function getCloseVestingEscrowInstructionDataDecoder(): Decoder<CloseVestingEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'remainingAccountsInfo',
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCloseVestingEscrowInstructionDataCodec(): Codec<
  CloseVestingEscrowInstructionDataArgs,
  CloseVestingEscrowInstructionData
> {
  return combineCodec(
    getCloseVestingEscrowInstructionDataEncoder(),
    getCloseVestingEscrowInstructionDataDecoder()
  );
}

export type CloseVestingEscrowAsyncInput<
  TAccountEscrow extends string = string,
  TAccountEscrowMetadata extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountCreatorToken extends string = string,
  TAccountCreator extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  escrowMetadata?: Address<TAccountEscrowMetadata>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  escrowToken: Address<TAccountEscrowToken>;
  creatorToken: Address<TAccountCreatorToken>;
  /** Creator. */
  creator: TransactionSigner<TAccountCreator>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  remainingAccountsInfo: CloseVestingEscrowInstructionDataArgs['remainingAccountsInfo'];
};

export async function getCloseVestingEscrowInstructionAsync<
  TAccountEscrow extends string,
  TAccountEscrowMetadata extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountCreatorToken extends string,
  TAccountCreator extends string,
  TAccountTokenProgram extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CloseVestingEscrowAsyncInput<
    TAccountEscrow,
    TAccountEscrowMetadata,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountCreator,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowMetadata,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountCreator,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowMetadata: { value: input.escrowMetadata ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    creatorToken: { value: input.creatorToken ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrowMetadata.value) {
    accounts.escrowMetadata.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 115, 99, 114, 111, 119, 95, 109, 101, 116, 97, 100, 97, 116,
            97,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowMetadata),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.creatorToken),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCloseVestingEscrowInstructionDataEncoder().encode(
      args as CloseVestingEscrowInstructionDataArgs
    ),
  } as CloseVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowMetadata,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountCreator,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CloseVestingEscrowInput<
  TAccountEscrow extends string = string,
  TAccountEscrowMetadata extends string = string,
  TAccountTokenMint extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountCreatorToken extends string = string,
  TAccountCreator extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Escrow. */
  escrow: Address<TAccountEscrow>;
  escrowMetadata: Address<TAccountEscrowMetadata>;
  /** Mint. */
  tokenMint: Address<TAccountTokenMint>;
  escrowToken: Address<TAccountEscrowToken>;
  creatorToken: Address<TAccountCreatorToken>;
  /** Creator. */
  creator: TransactionSigner<TAccountCreator>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Memo program. */
  memoProgram?: Address<TAccountMemoProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  remainingAccountsInfo: CloseVestingEscrowInstructionDataArgs['remainingAccountsInfo'];
};

export function getCloseVestingEscrowInstruction<
  TAccountEscrow extends string,
  TAccountEscrowMetadata extends string,
  TAccountTokenMint extends string,
  TAccountEscrowToken extends string,
  TAccountCreatorToken extends string,
  TAccountCreator extends string,
  TAccountTokenProgram extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LOCKER_PROGRAM_ADDRESS,
>(
  input: CloseVestingEscrowInput<
    TAccountEscrow,
    TAccountEscrowMetadata,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountCreator,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseVestingEscrowInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountEscrowMetadata,
  TAccountTokenMint,
  TAccountEscrowToken,
  TAccountCreatorToken,
  TAccountCreator,
  TAccountTokenProgram,
  TAccountMemoProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowMetadata: { value: input.escrowMetadata ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    creatorToken: { value: input.creatorToken ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowMetadata),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.creatorToken),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCloseVestingEscrowInstructionDataEncoder().encode(
      args as CloseVestingEscrowInstructionDataArgs
    ),
  } as CloseVestingEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountEscrowMetadata,
    TAccountTokenMint,
    TAccountEscrowToken,
    TAccountCreatorToken,
    TAccountCreator,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCloseVestingEscrowInstruction<
  TProgram extends string = typeof LOCKER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Escrow. */
    escrow: TAccountMetas[0];
    escrowMetadata: TAccountMetas[1];
    /** Mint. */
    tokenMint: TAccountMetas[2];
    escrowToken: TAccountMetas[3];
    creatorToken: TAccountMetas[4];
    /** Creator. */
    creator: TAccountMetas[5];
    /** Token program. */
    tokenProgram: TAccountMetas[6];
    /** Memo program. */
    memoProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: CloseVestingEscrowInstructionData;
};

export function parseCloseVestingEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseVestingEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      escrowMetadata: getNextAccount(),
      tokenMint: getNextAccount(),
      escrowToken: getNextAccount(),
      creatorToken: getNextAccount(),
      creator: getNextAccount(),
      tokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCloseVestingEscrowInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
