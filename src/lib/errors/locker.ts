/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { LOCKER_PROGRAM_ADDRESS } from '../programs';

/** MathOverflow: Math operation overflow */
export const LOCKER_ERROR__MATH_OVERFLOW = 0x1770; // 6000
/** FrequencyIsZero: Frequency is zero */
export const LOCKER_ERROR__FREQUENCY_IS_ZERO = 0x1771; // 6001
/** InvalidEscrowTokenAddress: Invalid escrow token address */
export const LOCKER_ERROR__INVALID_ESCROW_TOKEN_ADDRESS = 0x1772; // 6002
/** InvalidUpdateRecipientMode: Invalid update recipient mode */
export const LOCKER_ERROR__INVALID_UPDATE_RECIPIENT_MODE = 0x1773; // 6003
/** InvalidCancelMode: Invalid cancel mode */
export const LOCKER_ERROR__INVALID_CANCEL_MODE = 0x1774; // 6004
/** NotPermitToDoThisAction: Not permit to do this action */
export const LOCKER_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION = 0x1775; // 6005
/** InvalidRecipientTokenAccount: Invalid recipient token account */
export const LOCKER_ERROR__INVALID_RECIPIENT_TOKEN_ACCOUNT = 0x1776; // 6006
/** InvalidCreatorTokenAccount: Invalid creator token account */
export const LOCKER_ERROR__INVALID_CREATOR_TOKEN_ACCOUNT = 0x1777; // 6007
/** InvalidEscrowMetadata: Invalid escrow metadata */
export const LOCKER_ERROR__INVALID_ESCROW_METADATA = 0x1778; // 6008
/** InvalidVestingStartTime: Invalid vesting start time */
export const LOCKER_ERROR__INVALID_VESTING_START_TIME = 0x1779; // 6009
/** AlreadyCancelled: Already cancelled */
export const LOCKER_ERROR__ALREADY_CANCELLED = 0x177a; // 6010
/** CancelledAtIsZero: Cancelled timestamp is zero */
export const LOCKER_ERROR__CANCELLED_AT_IS_ZERO = 0x177b; // 6011
/** IncorrectTokenProgramId: Invalid token program ID */
export const LOCKER_ERROR__INCORRECT_TOKEN_PROGRAM_ID = 0x177c; // 6012
/** TransferFeeCalculationFailure: Calculate transfer fee failure */
export const LOCKER_ERROR__TRANSFER_FEE_CALCULATION_FAILURE = 0x177d; // 6013
/** UnsupportedMint: Unsupported mint */
export const LOCKER_ERROR__UNSUPPORTED_MINT = 0x177e; // 6014
/** InvalidRemainingAccountSlice: Invalid remaining accounts */
export const LOCKER_ERROR__INVALID_REMAINING_ACCOUNT_SLICE = 0x177f; // 6015
/** InsufficientRemainingAccounts: Insufficient remaining accounts */
export const LOCKER_ERROR__INSUFFICIENT_REMAINING_ACCOUNTS = 0x1780; // 6016
/** DuplicatedRemainingAccountTypes: Same accounts type is provided more than once */
export const LOCKER_ERROR__DUPLICATED_REMAINING_ACCOUNT_TYPES = 0x1781; // 6017
/** NoTransferHookProgram: Missing remaining accounts for transfer hook. */
export const LOCKER_ERROR__NO_TRANSFER_HOOK_PROGRAM = 0x1782; // 6018
/** ClaimingIsNotFinished: Claiming is not finished */
export const LOCKER_ERROR__CLAIMING_IS_NOT_FINISHED = 0x1783; // 6019
/** InvalidMerkleProof: Invalid merkle proof */
export const LOCKER_ERROR__INVALID_MERKLE_PROOF = 0x1784; // 6020
/** EscrowNotCancelled: Escrow is not cancelled */
export const LOCKER_ERROR__ESCROW_NOT_CANCELLED = 0x1785; // 6021
/** AmountIsZero: Amount is zero */
export const LOCKER_ERROR__AMOUNT_IS_ZERO = 0x1786; // 6022
/** InvalidParams: Invalid params */
export const LOCKER_ERROR__INVALID_PARAMS = 0x1787; // 6023

export type LockerError =
  | typeof LOCKER_ERROR__ALREADY_CANCELLED
  | typeof LOCKER_ERROR__AMOUNT_IS_ZERO
  | typeof LOCKER_ERROR__CANCELLED_AT_IS_ZERO
  | typeof LOCKER_ERROR__CLAIMING_IS_NOT_FINISHED
  | typeof LOCKER_ERROR__DUPLICATED_REMAINING_ACCOUNT_TYPES
  | typeof LOCKER_ERROR__ESCROW_NOT_CANCELLED
  | typeof LOCKER_ERROR__FREQUENCY_IS_ZERO
  | typeof LOCKER_ERROR__INCORRECT_TOKEN_PROGRAM_ID
  | typeof LOCKER_ERROR__INSUFFICIENT_REMAINING_ACCOUNTS
  | typeof LOCKER_ERROR__INVALID_CANCEL_MODE
  | typeof LOCKER_ERROR__INVALID_CREATOR_TOKEN_ACCOUNT
  | typeof LOCKER_ERROR__INVALID_ESCROW_METADATA
  | typeof LOCKER_ERROR__INVALID_ESCROW_TOKEN_ADDRESS
  | typeof LOCKER_ERROR__INVALID_MERKLE_PROOF
  | typeof LOCKER_ERROR__INVALID_PARAMS
  | typeof LOCKER_ERROR__INVALID_RECIPIENT_TOKEN_ACCOUNT
  | typeof LOCKER_ERROR__INVALID_REMAINING_ACCOUNT_SLICE
  | typeof LOCKER_ERROR__INVALID_UPDATE_RECIPIENT_MODE
  | typeof LOCKER_ERROR__INVALID_VESTING_START_TIME
  | typeof LOCKER_ERROR__MATH_OVERFLOW
  | typeof LOCKER_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION
  | typeof LOCKER_ERROR__NO_TRANSFER_HOOK_PROGRAM
  | typeof LOCKER_ERROR__TRANSFER_FEE_CALCULATION_FAILURE
  | typeof LOCKER_ERROR__UNSUPPORTED_MINT;

let lockerErrorMessages: Record<LockerError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  lockerErrorMessages = {
    [LOCKER_ERROR__ALREADY_CANCELLED]: `Already cancelled`,
    [LOCKER_ERROR__AMOUNT_IS_ZERO]: `Amount is zero`,
    [LOCKER_ERROR__CANCELLED_AT_IS_ZERO]: `Cancelled timestamp is zero`,
    [LOCKER_ERROR__CLAIMING_IS_NOT_FINISHED]: `Claiming is not finished`,
    [LOCKER_ERROR__DUPLICATED_REMAINING_ACCOUNT_TYPES]: `Same accounts type is provided more than once`,
    [LOCKER_ERROR__ESCROW_NOT_CANCELLED]: `Escrow is not cancelled`,
    [LOCKER_ERROR__FREQUENCY_IS_ZERO]: `Frequency is zero`,
    [LOCKER_ERROR__INCORRECT_TOKEN_PROGRAM_ID]: `Invalid token program ID`,
    [LOCKER_ERROR__INSUFFICIENT_REMAINING_ACCOUNTS]: `Insufficient remaining accounts`,
    [LOCKER_ERROR__INVALID_CANCEL_MODE]: `Invalid cancel mode`,
    [LOCKER_ERROR__INVALID_CREATOR_TOKEN_ACCOUNT]: `Invalid creator token account`,
    [LOCKER_ERROR__INVALID_ESCROW_METADATA]: `Invalid escrow metadata`,
    [LOCKER_ERROR__INVALID_ESCROW_TOKEN_ADDRESS]: `Invalid escrow token address`,
    [LOCKER_ERROR__INVALID_MERKLE_PROOF]: `Invalid merkle proof`,
    [LOCKER_ERROR__INVALID_PARAMS]: `Invalid params`,
    [LOCKER_ERROR__INVALID_RECIPIENT_TOKEN_ACCOUNT]: `Invalid recipient token account`,
    [LOCKER_ERROR__INVALID_REMAINING_ACCOUNT_SLICE]: `Invalid remaining accounts`,
    [LOCKER_ERROR__INVALID_UPDATE_RECIPIENT_MODE]: `Invalid update recipient mode`,
    [LOCKER_ERROR__INVALID_VESTING_START_TIME]: `Invalid vesting start time`,
    [LOCKER_ERROR__MATH_OVERFLOW]: `Math operation overflow`,
    [LOCKER_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION]: `Not permit to do this action`,
    [LOCKER_ERROR__NO_TRANSFER_HOOK_PROGRAM]: `Missing remaining accounts for transfer hook.`,
    [LOCKER_ERROR__TRANSFER_FEE_CALCULATION_FAILURE]: `Calculate transfer fee failure`,
    [LOCKER_ERROR__UNSUPPORTED_MINT]: `Unsupported mint`,
  };
}

export function getLockerErrorMessage(code: LockerError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (lockerErrorMessages as Record<LockerError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLockerError<TProgramErrorCode extends LockerError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LOCKER_PROGRAM_ADDRESS,
    code
  );
}
