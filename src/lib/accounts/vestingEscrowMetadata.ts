/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const VESTING_ESCROW_METADATA_DISCRIMINATOR = new Uint8Array([
  24, 204, 166, 104, 87, 158, 76, 13,
]);

export function getVestingEscrowMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VESTING_ESCROW_METADATA_DISCRIMINATOR
  );
}

export type VestingEscrowMetadata = {
  discriminator: ReadonlyUint8Array;
  /** The [Escrow]. */
  escrow: Address;
  /** Name of escrow. */
  name: string;
  /** Description of escrow. */
  description: string;
  /** Email of creator */
  creatorEmail: string;
  /** Email of recipient */
  recipientEmail: string;
};

export type VestingEscrowMetadataArgs = {
  /** The [Escrow]. */
  escrow: Address;
  /** Name of escrow. */
  name: string;
  /** Description of escrow. */
  description: string;
  /** Email of creator */
  creatorEmail: string;
  /** Email of recipient */
  recipientEmail: string;
};

export function getVestingEscrowMetadataEncoder(): Encoder<VestingEscrowMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['escrow', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['creatorEmail', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'recipientEmail',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: VESTING_ESCROW_METADATA_DISCRIMINATOR,
    })
  );
}

export function getVestingEscrowMetadataDecoder(): Decoder<VestingEscrowMetadata> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['escrow', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['creatorEmail', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['recipientEmail', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getVestingEscrowMetadataCodec(): Codec<
  VestingEscrowMetadataArgs,
  VestingEscrowMetadata
> {
  return combineCodec(
    getVestingEscrowMetadataEncoder(),
    getVestingEscrowMetadataDecoder()
  );
}

export function decodeVestingEscrowMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VestingEscrowMetadata, TAddress>;
export function decodeVestingEscrowMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VestingEscrowMetadata, TAddress>;
export function decodeVestingEscrowMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VestingEscrowMetadata, TAddress>
  | MaybeAccount<VestingEscrowMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestingEscrowMetadataDecoder()
  );
}

export async function fetchVestingEscrowMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VestingEscrowMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeVestingEscrowMetadata(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVestingEscrowMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VestingEscrowMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVestingEscrowMetadata(maybeAccount);
}

export async function fetchAllVestingEscrowMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VestingEscrowMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeVestingEscrowMetadata(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVestingEscrowMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VestingEscrowMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVestingEscrowMetadata(maybeAccount)
  );
}
