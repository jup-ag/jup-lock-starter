/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const ROOT_ESCROW_DISCRIMINATOR = new Uint8Array([
  253, 209, 220, 107, 206, 191, 71, 158,
]);

export function getRootEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ROOT_ESCROW_DISCRIMINATOR);
}

export type RootEscrow = {
  discriminator: ReadonlyUint8Array;
  /** token mint */
  tokenMint: Address;
  /** creator of the escrow */
  creator: Address;
  /** escrow base key */
  base: Address;
  /** 256 bit merkle root */
  root: ReadonlyUint8Array;
  /** bump */
  bump: number;
  /** token program flag */
  tokenProgramFlag: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** max claim amount */
  maxClaimAmount: bigint;
  /** max escrow */
  maxEscrow: bigint;
  /** total funded amount */
  totalFundedAmount: bigint;
  /** total escrow created */
  totalEscrowCreated: bigint;
  /** total distributed amount */
  totalDistributeAmount: bigint;
  /** version */
  version: bigint;
  /** padding */
  padding: bigint;
  /** buffer */
  buffer: Array<bigint>;
};

export type RootEscrowArgs = {
  /** token mint */
  tokenMint: Address;
  /** creator of the escrow */
  creator: Address;
  /** escrow base key */
  base: Address;
  /** 256 bit merkle root */
  root: ReadonlyUint8Array;
  /** bump */
  bump: number;
  /** token program flag */
  tokenProgramFlag: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** max claim amount */
  maxClaimAmount: number | bigint;
  /** max escrow */
  maxEscrow: number | bigint;
  /** total funded amount */
  totalFundedAmount: number | bigint;
  /** total escrow created */
  totalEscrowCreated: number | bigint;
  /** total distributed amount */
  totalDistributeAmount: number | bigint;
  /** version */
  version: number | bigint;
  /** padding */
  padding: number | bigint;
  /** buffer */
  buffer: Array<number | bigint>;
};

export function getRootEscrowEncoder(): Encoder<RootEscrowArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenMint', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['base', getAddressEncoder()],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['bump', getU8Encoder()],
      ['tokenProgramFlag', getU8Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 6)],
      ['maxClaimAmount', getU64Encoder()],
      ['maxEscrow', getU64Encoder()],
      ['totalFundedAmount', getU64Encoder()],
      ['totalEscrowCreated', getU64Encoder()],
      ['totalDistributeAmount', getU64Encoder()],
      ['version', getU64Encoder()],
      ['padding', getU64Encoder()],
      ['buffer', getArrayEncoder(getU128Encoder(), { size: 5 })],
    ]),
    (value) => ({ ...value, discriminator: ROOT_ESCROW_DISCRIMINATOR })
  );
}

export function getRootEscrowDecoder(): Decoder<RootEscrow> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenMint', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['base', getAddressDecoder()],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['bump', getU8Decoder()],
    ['tokenProgramFlag', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 6)],
    ['maxClaimAmount', getU64Decoder()],
    ['maxEscrow', getU64Decoder()],
    ['totalFundedAmount', getU64Decoder()],
    ['totalEscrowCreated', getU64Decoder()],
    ['totalDistributeAmount', getU64Decoder()],
    ['version', getU64Decoder()],
    ['padding', getU64Decoder()],
    ['buffer', getArrayDecoder(getU128Decoder(), { size: 5 })],
  ]);
}

export function getRootEscrowCodec(): Codec<RootEscrowArgs, RootEscrow> {
  return combineCodec(getRootEscrowEncoder(), getRootEscrowDecoder());
}

export function decodeRootEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RootEscrow, TAddress>;
export function decodeRootEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RootEscrow, TAddress>;
export function decodeRootEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RootEscrow, TAddress> | MaybeAccount<RootEscrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRootEscrowDecoder()
  );
}

export async function fetchRootEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RootEscrow, TAddress>> {
  const maybeAccount = await fetchMaybeRootEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRootEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RootEscrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRootEscrow(maybeAccount);
}

export async function fetchAllRootEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RootEscrow>[]> {
  const maybeAccounts = await fetchAllMaybeRootEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRootEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RootEscrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRootEscrow(maybeAccount));
}

export function getRootEscrowSize(): number {
  return 280;
}
