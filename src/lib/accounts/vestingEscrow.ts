/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const VESTING_ESCROW_DISCRIMINATOR = new Uint8Array([
  244, 119, 183, 4, 73, 116, 135, 195,
]);

export function getVestingEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VESTING_ESCROW_DISCRIMINATOR
  );
}

export type VestingEscrow = {
  discriminator: ReadonlyUint8Array;
  /** recipient address */
  recipient: Address;
  /** token mint */
  tokenMint: Address;
  /** creator of the escrow */
  creator: Address;
  /** escrow base key */
  base: Address;
  /** escrow bump */
  escrowBump: number;
  /** update_recipient_mode */
  updateRecipientMode: number;
  /** cancel_mode */
  cancelMode: number;
  /** token program flag */
  tokenProgramFlag: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** cliff time */
  cliffTime: bigint;
  /** frequency */
  frequency: bigint;
  /** cliff unlock amount */
  cliffUnlockAmount: bigint;
  /** amount per period */
  amountPerPeriod: bigint;
  /** number of period */
  numberOfPeriod: bigint;
  /** total claimed amount */
  totalClaimedAmount: bigint;
  /** vesting start time */
  vestingStartTime: bigint;
  /** cancelled_at */
  cancelledAt: bigint;
  /** buffer */
  padding1: bigint;
  /** buffer */
  buffer: Array<bigint>;
};

export type VestingEscrowArgs = {
  /** recipient address */
  recipient: Address;
  /** token mint */
  tokenMint: Address;
  /** creator of the escrow */
  creator: Address;
  /** escrow base key */
  base: Address;
  /** escrow bump */
  escrowBump: number;
  /** update_recipient_mode */
  updateRecipientMode: number;
  /** cancel_mode */
  cancelMode: number;
  /** token program flag */
  tokenProgramFlag: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** cliff time */
  cliffTime: number | bigint;
  /** frequency */
  frequency: number | bigint;
  /** cliff unlock amount */
  cliffUnlockAmount: number | bigint;
  /** amount per period */
  amountPerPeriod: number | bigint;
  /** number of period */
  numberOfPeriod: number | bigint;
  /** total claimed amount */
  totalClaimedAmount: number | bigint;
  /** vesting start time */
  vestingStartTime: number | bigint;
  /** cancelled_at */
  cancelledAt: number | bigint;
  /** buffer */
  padding1: number | bigint;
  /** buffer */
  buffer: Array<number | bigint>;
};

export function getVestingEscrowEncoder(): Encoder<VestingEscrowArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['recipient', getAddressEncoder()],
      ['tokenMint', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['base', getAddressEncoder()],
      ['escrowBump', getU8Encoder()],
      ['updateRecipientMode', getU8Encoder()],
      ['cancelMode', getU8Encoder()],
      ['tokenProgramFlag', getU8Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 4)],
      ['cliffTime', getU64Encoder()],
      ['frequency', getU64Encoder()],
      ['cliffUnlockAmount', getU64Encoder()],
      ['amountPerPeriod', getU64Encoder()],
      ['numberOfPeriod', getU64Encoder()],
      ['totalClaimedAmount', getU64Encoder()],
      ['vestingStartTime', getU64Encoder()],
      ['cancelledAt', getU64Encoder()],
      ['padding1', getU64Encoder()],
      ['buffer', getArrayEncoder(getU128Encoder(), { size: 5 })],
    ]),
    (value) => ({ ...value, discriminator: VESTING_ESCROW_DISCRIMINATOR })
  );
}

export function getVestingEscrowDecoder(): Decoder<VestingEscrow> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['recipient', getAddressDecoder()],
    ['tokenMint', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['base', getAddressDecoder()],
    ['escrowBump', getU8Decoder()],
    ['updateRecipientMode', getU8Decoder()],
    ['cancelMode', getU8Decoder()],
    ['tokenProgramFlag', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 4)],
    ['cliffTime', getU64Decoder()],
    ['frequency', getU64Decoder()],
    ['cliffUnlockAmount', getU64Decoder()],
    ['amountPerPeriod', getU64Decoder()],
    ['numberOfPeriod', getU64Decoder()],
    ['totalClaimedAmount', getU64Decoder()],
    ['vestingStartTime', getU64Decoder()],
    ['cancelledAt', getU64Decoder()],
    ['padding1', getU64Decoder()],
    ['buffer', getArrayDecoder(getU128Decoder(), { size: 5 })],
  ]);
}

export function getVestingEscrowCodec(): Codec<
  VestingEscrowArgs,
  VestingEscrow
> {
  return combineCodec(getVestingEscrowEncoder(), getVestingEscrowDecoder());
}

export function decodeVestingEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VestingEscrow, TAddress>;
export function decodeVestingEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VestingEscrow, TAddress>;
export function decodeVestingEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VestingEscrow, TAddress> | MaybeAccount<VestingEscrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestingEscrowDecoder()
  );
}

export async function fetchVestingEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VestingEscrow, TAddress>> {
  const maybeAccount = await fetchMaybeVestingEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVestingEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VestingEscrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVestingEscrow(maybeAccount);
}

export async function fetchAllVestingEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VestingEscrow>[]> {
  const maybeAccounts = await fetchAllMaybeVestingEscrow(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVestingEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VestingEscrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVestingEscrow(maybeAccount));
}

export function getVestingEscrowSize(): number {
  return 296;
}
